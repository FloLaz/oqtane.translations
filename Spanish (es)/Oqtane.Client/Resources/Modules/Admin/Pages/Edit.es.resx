<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Name.Text" xml:space="preserve">
    <value>Nombre:</value>
  </data>
  <data name="Parent.Text" xml:space="preserve">
    <value>Padre:</value>
  </data>
  <data name="Title.Text" xml:space="preserve">
    <value>Título:</value>
  </data>
  <data name="Settings.Heading" xml:space="preserve">
    <value>Configuración</value>
  </data>
  <data name="SiteRoot" xml:space="preserve">
    <value>Sitio raiz</value>
  </data>
  <data name="Before" xml:space="preserve">
    <value>Antes</value>
  </data>
  <data name="After" xml:space="preserve">
    <value>Despues</value>
  </data>
  <data name="Page.Select" xml:space="preserve">
    <value>Seleccione página</value>
  </data>
  <data name="Container.Select" xml:space="preserve">
    <value>Seleccione contenedor</value>
  </data>
  <data name="Error.ChildPage.Load" xml:space="preserve">
    <value>Error cargando pagina hija</value>
  </data>
  <data name="Error.Pane.Load" xml:space="preserve">
    <value>Error cargando panel de distribución para el tema</value>
  </data>
  <data name="Mesage.Page.PathExists" xml:space="preserve">
    <value>Una página con la ruta {0} ya existe para la página padre seleccionada. La ruta necesita ser única para el padre elegido.</value>
  </data>
  <data name="Message.Required.PageInfo" xml:space="preserve">
    <value>Debes proveer un nombre de página, tema y contenedor</value>
  </data>
  <data name="Error.Page.Save" xml:space="preserve">
    <value>Error guardando la página</value>
  </data>
  <data name="Name.HelpText" xml:space="preserve">
    <value>Ingrese el nombre de la página</value>
  </data>
  <data name="Parent.HelpText" xml:space="preserve">
    <value>Seleccione el padre para esta pagina en la jerarquía del sitio</value>
  </data>
  <data name="Navigation.HelpText" xml:space="preserve">
    <value>Seleccione si la página es parte de la navegación del sitio o esta oculta</value>
  </data>
  <data name="UrlPath.HelpText" xml:space="preserve">
    <value>Opcionalmente ingrese la ruta de la url para esta página (ej. home). Si no selecciona una ruta se usará el nombre de la página en su defecto</value>
  </data>
  <data name="Redirect.HelpText" xml:space="preserve">
    <value>Opcionalmente ingrese una url que esta pagina debería redireccionar cuando un usuario navega a esta</value>
  </data>
  <data name="Title.HelpText" xml:space="preserve">
    <value>Opcionalmente ingrese el título de la página. Si no se ingresa se utilizará el nombre de la página en su defecto</value>
  </data>
  <data name="Theme.HelpText" xml:space="preserve">
    <value>Seleccione el tema para esta página</value>
  </data>
  <data name="DefaultContainer.HelpText" xml:space="preserve">
    <value>Selecciona el contenedor por defecto para la pagina</value>
  </data>
  <data name="Icon.HelpText" xml:space="preserve">
    <value>De manera opcional puedes agregar un nombre de una clase de icono para esta pagina que se mostrará en la navegación</value>
  </data>
  <data name="Personalizable.HelpText" xml:space="preserve">
    <value>Seleccione si te gustaría que los usuarios puedan personalizar la página con su propio contenido</value>
  </data>
  <data name="Navigation.Text" xml:space="preserve">
    <value>Navegación?</value>
  </data>
  <data name="UrlPath.Text" xml:space="preserve">
    <value>Ruta:</value>
  </data>
  <data name="Redirect.Text" xml:space="preserve">
    <value>Redireccionar:</value>
  </data>
  <data name="Theme.Text" xml:space="preserve">
    <value>Tema:</value>
  </data>
  <data name="DefaultContainer.Text" xml:space="preserve">
    <value>Contenedor por defecto:</value>
  </data>
  <data name="Icon.Text" xml:space="preserve">
    <value>Icono:</value>
  </data>
  <data name="Personalizable.Text" xml:space="preserve">
    <value>Personalizable?</value>
  </data>
  <data name="Appearance.Name" xml:space="preserve">
    <value>Apariencia</value>
  </data>
  <data name="ThisLocation.Keep" xml:space="preserve">
    <value>Mantener la ubicación actual</value>
  </data>
  <data name="ToBeginning" xml:space="preserve">
    <value>Al inicio</value>
  </data>
  <data name="ToEnd" xml:space="preserve">
    <value>Al final</value>
  </data>
  <data name="Error.Page.Load" xml:space="preserve">
    <value>Error cargando página</value>
  </data>
  <data name="Move.HelpText" xml:space="preserve">
    <value>Seleciona la ubicacion donde te gustaria que la pagina se mueva en relación con otras paginas</value>
  </data>
  <data name="Move.Text" xml:space="preserve">
    <value>Mover:</value>
  </data>
  <data name="ModuleDefinition" xml:space="preserve">
    <value>Modulo</value>
  </data>
  <data name="ModuleTitle" xml:space="preserve">
    <value>Título</value>
  </data>
  <data name="PageModules.Heading" xml:space="preserve">
    <value>Modulos</value>
  </data>
  <data name="ModuleSettings.Text" xml:space="preserve">
    <value>Editar</value>
  </data>
  <data name="DeleteModule.Header" xml:space="preserve">
    <value>Borrar Modulo</value>
  </data>
  <data name="DeleteModule.Message" xml:space="preserve">
    <value>¿Seguro desea borrar el módulo?</value>
  </data>
  <data name="DeleteModule.Text" xml:space="preserve">
    <value>Borrar</value>
  </data>
  <data name="Permissions.Heading" xml:space="preserve">
    <value>Permisos</value>
  </data>
  <data name="ThemeSettings.Heading" xml:space="preserve">
    <value>Configuraciones del tema</value>
  </data>
  <data name="Clickable.HelpText" xml:space="preserve">
    <value>Seleccione si la liga de navegación esta activa o no</value>
  </data>
  <data name="Clickable.Text" xml:space="preserve">
    <value>Clickable?</value>
  </data>
  <data name="Meta.HelpText" xml:space="preserve">
    <value>Ingrese meta tags opcionales (en la misma forma que desea que se incluyan en la salida de la página).</value>
  </data>
  <data name="Meta.Text" xml:space="preserve">
    <value>Meta:</value>
  </data>
</root>